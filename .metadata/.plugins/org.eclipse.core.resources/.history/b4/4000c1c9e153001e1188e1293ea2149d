package functionalInterfaces;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

class Employee{
	
	private String id;
	private String name;
	private String adderess;
	private double sal;
	
	
	public Employee() {
	}
	
	public Employee(String id, String name, String adderess, double sal) {
		this.id = id;
		this.name = name;
		this.adderess = adderess;
		this.sal = sal;
	}

	@Override
	public String toString() {
		return "Employee [id=" + id + ", name=" + name + ", adderess=" + adderess + ", sal=" + sal + "]";
	}	
}

public class FlatMapExample 
{
	
	public static void main(String[] args)
	{
		List<List<Employee>> listOfList=new ArrayList<>();
		
		
		
		List<Employee> list1=Arrays.asList(
				             new Employee("A121","Madhu","Hyd",30000.0),
				             new Employee("A123","Manu","Ban",50000.0));
		
		
		List<Employee> list2=Arrays.asList(
	             new Employee("B121","Madhu","Hyd",30000.0),
	             new Employee("B123","Manu","Ban",50000.0));
		
		
		
		List<Employee> list3=Arrays.asList(
	             new Employee("C121","Madhu","Hyd",30000.0),
	             new Employee("C123","Manu","Ban",50000.0));
		
		
		
		
		listOfList.addAll(Arrays.asList(list1,list2,list3));
		
		
		listOfList.forEach(e->System.out.println(e));
		
		
       List<Employee>	ll=	listOfList.stream().flatMap(e->e.stream()).collect(Collectors.toList());
		
        System.out.println(ll);

	}

}
